    - name: Process each branch
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NAME: ${{ github.event.inputs.name }}
        PATH_TO_ZIP: ${{ github.event.inputs.path_to_zip }}
      run: |
        ZIP_NAME="$NAME.zip"

        while read -r branch; do
          if [ -z "$branch" ]; then
            continue
          fi

          # Skip if branch doesn't contain "." (e.g. snapshot) or contains "-" (e.g. prerelease)
          if [[ "$branch" != *"."* || "$branch" == *"-"* ]]; then
            echo "Skipping branch '$branch' (not a stable version)."
            continue
          fi

          TAG="$branch"

          echo ""
          echo "========= Processing branch: $branch ========="
          echo "Release tag: $TAG"
          echo "Path to zip: $PATH_TO_ZIP"
          echo "Zip file name: $ZIP_NAME"

          # Check if release already exists and contains the asset
          RELEASE_INFO=$(curl -s -H "Accept: application/vnd.github+json" \
            -H "Authorization: token $GH_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG)

          RELEASE_ID=$(echo "$RELEASE_INFO" | jq -r '.id // empty')

          if [ -n "$RELEASE_ID" ]; then
            echo "Release for tag '$TAG' already exists, checking asset..."
            EXISTING_ASSET=$(curl -s -H "Accept: application/vnd.github+json" \
              -H "Authorization: token $GH_TOKEN" \
              https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets | jq -r ".[] | select(.name==\"$ZIP_NAME\") | .id // empty")

            if [ -n "$EXISTING_ASSET" ]; then
              echo "Asset '$ZIP_NAME' already exists in release '$TAG', skipping branch."
              continue
            fi

            UPLOAD_URL=$(echo "$RELEASE_INFO" | jq -r '.upload_url' | sed 's/{?name,label}//')
          fi

          echo "Cloning branch..."
          git clone --depth 1 --branch "$branch" \
            https://github.com/InventivetalentDev/minecraft-assets.git \
            "tmp-$branch"

          if [ -d "tmp-$branch/$PATH_TO_ZIP" ]; then
            echo "Creating ZIP archive..."
            (cd "tmp-$branch" && zip -r "../zips/$ZIP_NAME" "$PATH_TO_ZIP")
            echo "ZIP created: zips/$ZIP_NAME"
          else
            echo "Directory '$PATH_TO_ZIP' not found in branch $branch. Skipping."
            rm -rf "tmp-$branch"
            continue
          fi

          rm -rf "tmp-$branch"

          if [ -z "$RELEASE_ID" ]; then
            echo "Release with tag '$TAG' not found, creating..."
            RELEASE_RESPONSE=$(curl -s -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token $GH_TOKEN" \
              https://api.github.com/repos/${{ github.repository }}/releases \
              -d "{\"tag_name\":\"$TAG\",\"name\":\"$branch\",\"body\":\"Auto-generated release for branch $branch.\",\"draft\":false,\"prerelease\":false}")

            RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id // empty')
            UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | jq -r '.upload_url' | sed 's/{?name,label}//')

            if [ -z "$RELEASE_ID" ]; then
              echo "ERROR: Failed to create release for branch $branch"
              echo "$RELEASE_RESPONSE"
              continue
            fi
          fi

          echo "Uploading ZIP..."
          curl -s -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Content-Type: application/zip" \
            --data-binary @"zips/$ZIP_NAME" \
            "$UPLOAD_URL?name=$ZIP_NAME"

          echo "Release processed successfully for branch $branch."
          echo "-----------------------------------"
        done < branches_to_process.txt
