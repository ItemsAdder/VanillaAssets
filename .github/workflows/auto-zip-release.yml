name: Auto Zip Release for External Branches

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      branch:
        description: "Specific branch name to process"
        required: false
        default: ""
      tag_suffix:
        description: "Suffix for the release tag"
        required: false
        default: "-models"
      path_to_zip:
        description: "Path inside the repo to include in ZIP (e.g., assets/minecraft/models)"
        required: false
        default: "assets/minecraft/models"

jobs:
  poll-and-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout this repository
      uses: actions/checkout@v4

    # Fetch branch list if no specific branch
    - name: Fetch all branches from the remote repository
      if: ${{ github.event.inputs.branch == '' }}
      run: |
        > branches.txt

        PAGE=1
        while true; do
          RESPONSE=$(curl -s -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/InventivetalentDev/minecraft-assets/branches?per_page=100&page=$PAGE")

          COUNT=$(echo "$RESPONSE" | jq 'length')
          if [ "$COUNT" -eq 0 ]; then
            break
          fi

          echo "$RESPONSE" | jq -r '.[].name' >> branches.txt

          PAGE=$((PAGE+1))
        done

        echo "Fetched branches:"
        cat branches.txt

    # Compare with saved list
    - name: Compare with previous branch list
      if: ${{ github.event.inputs.branch == '' }}
      run: |
        if [ ! -f .last_branches ]; then
          touch .last_branches
        fi

        comm -23 <(sort branches.txt) <(sort .last_branches) > new_branches.txt

        echo "New branches detected:"
        cat new_branches.txt || true

        cp branches.txt .last_branches

    - name: Exit if no new branches
      if: ${{ github.event.inputs.branch == '' }}
      run: |
        if [ ! -s new_branches.txt ]; then
          echo "No new branches found. Exiting."
          exit 0

    - name: Create output folder
      run: mkdir zips

    # Prepare list of branches to process
    - name: Prepare branch list to process
      run: |
        if [ "${{ github.event.inputs.branch }}" != "" ]; then
          echo "${{ github.event.inputs.branch }}" > branches_to_process.txt
        else
          cp new_branches.txt branches_to_process.txt
        fi

    # Main processing
    - name: Process each branch
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAG_SUFFIX: ${{ github.event.inputs.tag_suffix }}
        PATH_TO_ZIP: ${{ github.event.inputs.path_to_zip }}
      run: |
        while read -r branch; do
          if [ -z "$branch" ]; then
            continue
          fi

          TAG="${branch}${TAG_SUFFIX}"

          echo ""
          echo "========= Processing branch: $branch ========="
          echo "Release tag: $TAG"
          echo "Path to zip: $PATH_TO_ZIP"

          # Check if release exists
          RELEASE_INFO=$(curl -s -H "Accept: application/vnd.github+json" \
            -H "Authorization: token $GH_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG)

          RELEASE_ID=$(echo "$RELEASE_INFO" | jq -r '.id // empty')

          if [ -n "$RELEASE_ID" ]; then
            echo "Release with tag '$TAG' already exists. Skipping."
            continue
          fi

          # Clone repo
          echo "Cloning branch..."
          git clone --depth 1 --branch "$branch" \
            https://github.com/InventivetalentDev/minecraft-assets.git \
            "tmp-$branch"

          if [ -d "tmp-$branch/$PATH_TO_ZIP" ]; then
            echo "Creating ZIP archive..."
            (cd "tmp-$branch" && zip -r "../zips/$branch.zip" "$PATH_TO_ZIP")
            echo "ZIP created: zips/$branch.zip"
          else
            echo "Directory '$PATH_TO_ZIP' not found in branch $branch. Skipping."
            rm -rf "tmp-$branch"
            continue
          fi

          rm -rf "tmp-$branch"

          # Create release
          echo "Creating release with tag '$TAG'..."
          RELEASE_RESPONSE=$(curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token $GH_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d "{\"tag_name\":\"$TAG\",\"name\":\"Models for $branch\",\"body\":\"Auto-generated release for branch $branch.\",\"draft\":false,\"prerelease\":false}")

          UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | jq -r '.upload_url' | sed 's/{?name,label}//')

          if [ -z "$UPLOAD_URL" ] || [ "$UPLOAD_URL" = "null" ]; then
            echo "ERROR: Failed to create release for branch $branch"
            echo "$RELEASE_RESPONSE"
            continue
          fi

          # Upload ZIP
          echo "Uploading ZIP..."
          curl -s -X POST \
            -H "Authorization: token $GH_TOKEN" \
            -H "Content-Type: application/zip" \
            --data-binary @"zips/$branch.zip" \
            "$UPLOAD_URL?name=$branch.zip"

          echo "Release created successfully for branch $branch."
          echo "-----------------------------------"
        done < branches_to_process.txt
